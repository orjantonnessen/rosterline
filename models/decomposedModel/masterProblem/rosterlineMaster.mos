! This file is the code for the master problem of a decomposed model of the roster line problem as of 18 December 2018
! Created by Sander Coates and Vegard Pedersen
! Part of Project Report 9th semester Indoek
! --------------------------------------------------------------------------------------------------------------------

!=== Setup ===
	model rosterlineMaster

	options explterm
	options noimplicit

	uses "mmxprs"; !gain access to the Xpress-Optimizer solver

	!Data file names
	parameters
		InstanceFile = 'instanceFile.txt';
		ColumnsFile = '../columns.txt';
		DualsFile = 'masterDuals.txt';
		SolutionFile = 'masterSolution.txt';
	end-parameters

!=== Data file declarations ===
	declarations
		!=== Sets ===
			!Shifts
			ShiftTypes:					set 						of integer; !Set of possible shift types
			ShiftGroups:				set 						of integer; !Set of shift groups
			ShiftTypesGroup: 			dynamic array(ShiftGroups)	of set of integer; !Sets of shift types in one shift group
			ShiftTypesWorking: 			set 						of integer; !Set of shift types representing working shifts
			ShiftTypesOff: 				set 						of integer; !Set of shift types representing off shifts

			!Shift combinations and patterns
			StrictDayOff1: 				dynamic array(ShiftTypes)	of set of integer; !Set of shift types that cannot follow shift type with one strict day off in between
			StrictDayOff2:				dynamic array(ShiftTypes)	of set of integer; !Set of shift types that cannot follow shift type with two strict days off in between
			PatternsPenalized: 			set 						of integer; !Set of penalized patterns
			PatternsRewarded: 			set 						of integer; !Set of rewarded patterns
			PatternsIllegal: 			set 						of integer; !Set of illegal patterns
			Patterns:					set 						of integer; !Assisting set - union of all pattern sets

			!Weeks
			Weeks: 						set of integer; !Set of weeks in planning period

			!Days
			Days: 						set 							of integer; !Set of days in planning period
			DaysInWeek: 				dynamic array(Weeks) 			of set of integer; !Sets of days in week w
			Weekdays: 					set 							of string; !Set of weekdays (set to integer representation for now)
			WeekendDaysInWeek: 			dynamic array(Weeks) 			of set of integer; !Sets of weekend days in week w
			DaysOnWeekday: 				dynamic array(Weekdays)			of set of integer; !Sets of days occuring on weekday a
			DaysOnWeekdayInWeek: 		dynamic array(Weekdays,Weeks)	of set of integer; !Set of days on weekday a in week w (one day)
			NormPeriodStartDays: 		set of integer; !Set of starting days in norm periods for work load calculations
			WeekdaysStartPattern: 		dynamic array(Patterns) 		of set of string; !Set of set of weekdays when pattern p can begin

		!=== Parameters ===
			!Time
			T_S:			array(ShiftTypesWorking)					of real; !Start time of shift type s
			T_E:			array(ShiftTypesWorking)					of real; !End time of shift type s
			T:				array(ShiftTypesWorking)					of real; !Duration of shift type s
			T_R:														real; !Min rest time between shifts without penalty
			T_RS:														real; !Min rest time between shifts
			H:															integer; !Hours in a day (=24)

			!Other
			C_minus:													real; !Cost per hour undertime in norm period
			C_plus:														real; !Cost per hour overtime in norm period
			Nmax:														integer; !Max number of consecutive days working
			NmaxGroup:		array(ShiftGroups)							of integer; !Max number of consecutive days working shift group g
			Nmin:														integer; !Min number of consecutive days working
			NminGroup:		array(ShiftGroups)							of integer; !Min number of consecutive days working shift group g
			W_W:														integer; !Number of weeks in period subject to constraints on number of free wekends
			Nmin_W:														integer; !Number of weekends free during a period of W_W weekends
			D_S:														integer; !Number of days in period with requirements on strict days off
			Nmin_S:														integer; !Min number of strict days off in D_S days
			D_R:														integer; !Number of days in period with requirements on resting days
			Nmax_R:														integer; !Max number of days with little rest in R days
			H_S1:														real; !Number of hours off required for strict day off
			H_S2:														real; !Number of hours off required for two strict days off
			N_N:														integer; !Number of days in norm period for workload calculation
			W_N:														real; !Number of weeks in norm period for workload calculation (=N_N/7)
			H_W:														real; !Number of contracted working hours per week
			WMax_plus:													real; !Maximum hours of overtime in norm period for workload calculation
			WMax_minus:													real; !Maximum hours of undertime in norm period for workload calculation
			P:				array(PatternsPenalized)					of real; !Penalty for working pattern p
			R:				array(PatternsRewarded)						of real; !Reward for working pattern p
			D:				dynamic array(Patterns) 					of integer; !Duration (number of days) in pattern p
			M:				dynamic array(Days,ShiftGroups,Patterns) 	of integer; !Indicates of day d on shift group g is in pattern p
	end-declarations

!=== Data file initializations ===
	initializations from InstanceFile
		!=== Sets ===
			!Shifts
			ShiftTypes;
			ShiftGroups;
			ShiftTypesGroup;
			ShiftTypesWorking;
			ShiftTypesOff;

			!Shift combinations and patterns
			StrictDayOff1;
			StrictDayOff2;
			PatternsPenalized;
			PatternsRewarded;
			PatternsIllegal;

			!Weeks
			Weeks;

			!Days
			Days;
			DaysInWeek;
			Weekdays;
			WeekendDaysInWeek;
			DaysOnWeekday;
			DaysOnWeekdayInWeek;
			NormPeriodStartDays;
			WeekdaysStartPattern;

		!=== Parameters ===
			!Time
			T_S;
			T_E;
			T;
			T_R;
			T_RS;
			H;

			!Other
			C_minus;
			C_plus;
			Nmax;
			NmaxGroup;
			Nmin;
			NminGroup;
			W_W;
			Nmin_W;
			D_S;
			Nmin_S;
			D_R;
			Nmax_R;
			H_S1;
			H_S2;
			N_N;
			W_N;
			H_W;
			WMax_plus;
			WMax_minus;
			P;
			R;
			D;
			M;
	end-initializations

!=== Roster line file declarations ===
	!=== Sets ===
		declarations
			Rosterlines:    set of integer; !Set of roster lines
			ForbiddenRosterlines: set of integer; !Set of forbidden roster lines (used if finding several integer solutions)
		end-declarations

	!=== Parameters ===
		declarations
			C:		dynamic array(Rosterlines)		    			of real; !Cost coefficient in objective function for each roster line
			A:      dynamic array(Days, ShiftTypes, Rosterlines)    of integer; !Assignment of shift type s on day d in roster line r, binary
			A_g:    dynamic array(Days, Rosterlines, ShiftGroups)   of integer; !Assignment of shift type from shift group g on day d in roster line r, binary
			A_W:    dynamic array(Days, Rosterlines)                of integer; !Assignment of working shift type on day d in roster line r, binary
			A_O:    dynamic array(Days, Rosterlines)                of integer; !Assignment of off shift type on day d in roster line r, binary
			B:      dynamic array(Weeks, Rosterlines)               of integer; !Weekend w off in roster line r, binary
			DD:     dynamic array(NormPeriodStartDays, Rosterlines) of real; !Number hours worked in the norm period starting on day d in roster line r
			V:		dynamic array(Days, Rosterlines)				of integer; !Assignment of a day with little rest on day d in roster line r, binary
		end-declarations

!=== Roster line file initializations ===
	!=== Sets ===
		initializations from ColumnsFile
			Rosterlines;
			ForbiddenRosterlines;
		end-initializations

	!=== Parameters ===
		initializations from ColumnsFile
			C;
			A;
			A_g;
			A_W;
			A_O;
			B;
			DD;
			V;
		end-initializations

!=== Variables ===
	declarations
		l: 			    dynamic array(Rosterlines)                      		of mpvar; !Lambda variables for columns (roster lines)
		m:				dynamic array(Days,PatternsPenalized+PatternsRewarded)	of mpvar; !Pattern p worked, starting on day d
		s:				dynamic array(Days)										of mpvar; !Strict day off on day d
		u_minus:		dynamic array(NormPeriodStartDays)						of mpvar; !Hours working less than contracted in norm period
		u_plus:			dynamic array(NormPeriodStartDays)						of mpvar; !Hours working more than contracted in norm period
	end-declarations

	!Create l (lambda) variables
		forall (r in Rosterlines) do
			create(l(r));
			!l(r) is_binary;
		end-do
		forall (r in ForbiddenRosterlines) do
			l(r) = 0;
		end-do

	!Create m variables
		forall (p in PatternsRewarded+PatternsPenalized) do
			forall (d in union(a in WeekdaysStartPattern(p)) DaysOnWeekday(a) | d <= getsize(Days) - D(p) + 1) do !Consider replacing getsize(Days) with parameter nDays
				create(m(d, p));
				!m(d, p) is_binary;
			end-do
		end-do

	!Create s variables
		forall (d in Days) do
			create(s(d));
			!s(d) is_binary; !Consider redundant
		end-do

	!Create u variables
		forall (d in NormPeriodStartDays) do
			create(u_minus(d));
			u_minus(d) <= WMax_minus;
			create(u_plus(d));
			u_plus(d) <= WMax_plus;
		end-do

!=== Objective function ===
	declarations
		RosterLineCost:	linctr;
	end-declarations

	RosterLineCost :=	  sum(r in Rosterlines) C(r) * l(r) !Cost of roster line r from sub problem
						+ C_minus * sum(d in NormPeriodStartDays) u_minus(d) !Under time penalty
						+ C_plus * sum(d in NormPeriodStartDays) u_plus(d) !Over time penalty - removed if handled in sub-problem
						+ sum(p in PatternsPenalized) P(p) * sum(d in union(i in WeekdaysStartPattern(p)) DaysOnWeekday(i) | d <= getsize(Days) - D(p) + 1) m(d, p) !Pattern penalty
						- sum(p in PatternsRewarded) R(p) * sum(d in union(i in WeekdaysStartPattern(p)) DaysOnWeekday(i) | d <= getsize(Days) - D(p) + 1) m(d, p); !Pattern reward

!=== Constraints ===
	declarations
		Convexity:					linctr;
		MaxConsecDaysWorking:		dynamic array(Days)							of linctr; !Maximum consecutive days working
		MinConsecDaysWorking:		dynamic array(Days+{0})						of linctr; !Minimum consecutive days working
		MaxConsecDaysWorkingGroup:	dynamic array(ShiftGroups, Days)			of linctr; !Maximum consecutive days working shift group
		MinConsecDaysWorkingGroup:	dynamic array(ShiftGroups, Days+{0})		of linctr; !Minimum consecutive days working shift group
		MaxReducedRest:				dynamic array(Days)							of linctr; !Maximum number of reduced rest days in regulation period
		MinWeekendsOff:				dynamic array(Weeks)						of linctr; !Minimum number of weekends off in regulation period
		StrictDaysOff:				dynamic array(Days)							of linctr; !Required off shift for strict day off
		StrictDaysOff1:				dynamic array(Days, ShiftTypes, ShiftTypes)	of linctr; !One strict day off
		StrictDaysOff2:				dynamic array(Days, ShiftTypes, ShiftTypes) of linctr; !Two strict days off
		MinStrictDaysOff:			dynamic array(Days)							of linctr; !Minimum number of strict days of in regulation period
		WorkLoad_plus:				dynamic array(NormPeriodStartDays)			of linctr; !Work load with over time
		WorkLoad_minus:				dynamic array(NormPeriodStartDays)			of linctr; !Work load with under time
		IllegalPatterns:			dynamic array(PatternsIllegal, Days)		of linctr; !No illegal pattern worked
		RewardedPatterns:			dynamic array(PatternsRewarded, Days)		of linctr; !Get reqaward if worked penalized pattern
		PenalizedPatterns:			dynamic array(PatternsPenalized, Days)		of linctr; !Take penalty if worked penalized pattern
		OverlappingPatterns:		dynamic array(Patterns, Days)				of linctr; !Handle overlapping patterns
	end-declarations

	!Convexity constraint
		Convexity := sum(r in Rosterlines) l(r) = 1;

	!Maximum consecutive days working
		forall (d in Days | d <= getsize(Days) - Nmax) do
			MaxConsecDaysWorking(d) := sum(r in Rosterlines, dd in d..d+Nmax) A_W(dd, r) * l(r) <= Nmax;
		end-do
	!Minimum consecutive days working
		forall (d in (Days+{0}) | d <= getsize(Days) - Nmin) do
			if (d = 0) then !Assume that the employee comes from an off shift
				MinConsecDaysWorking(d) := sum(r in Rosterlines, dd in (d+1)..d+Nmin) A_W(dd, r) * l(r) >= Nmin * (1 - sum(r in Rosterlines) A_O(d + 1, r) * l(r));
			else
				MinConsecDaysWorking(d) := sum(r in Rosterlines, dd in (d+1)..d+Nmin) A_W(dd, r) * l(r) >= Nmin * sum(r in Rosterlines) (A_O(d, r) - A_O(d + 1, r)) * l(r);
			end-if
		end-do
	!Maximum consecutive days working shift group
		forall (g in ShiftGroups, d in Days | d <= getsize(Days) - NmaxGroup(g)) do
			MaxConsecDaysWorkingGroup(g, d) := sum(r in Rosterlines, dd in d..d+NmaxGroup(g)) A_g(dd, r, g) * l(r) <= NmaxGroup(g);
		end-do
	!Minimum consecutive days working shift group
		forall (g in ShiftGroups, d in (Days+{0}) | d <= getsize(Days) - NminGroup(g)) do
			if (d = 0) then !Assume that the employee comes from an off shift
				MinConsecDaysWorkingGroup(g,d) := sum(r in Rosterlines, dd in (d+1)..d+NminGroup(g)) A_g(dd, r, g) * l(r) >= NminGroup(g) * sum(r in Rosterlines) (A_g(d + 1, r, g) - 1) * l(r);
			else
				MinConsecDaysWorkingGroup(g,d) := sum(r in Rosterlines, dd in (d+1)..d+NminGroup(g)) A_g(dd, r, g) * l(r) >= NminGroup(g) * sum(r in Rosterlines) (A_g(d + 1, r, g) - A_g(d, r, g)) * l(r);
			end-if
		end-do
	!Maximum reduced rest over regulation period
		forall (d in Days | d <= getsize(Days) - D_R + 1) do
			MaxReducedRest(d) := sum(r in Rosterlines, dd in d..d+D_R-1) V(dd,r) * l(r) <= Nmax_R;
		end-do

	!Minimum number of weekends off in regulation period
		forall (w in Weeks | w <= getsize(Weeks) - W_W+1) do
			MinWeekendsOff(w) := sum(r in Rosterlines, ww in w..w+W_W-1) B(ww, r) * l(r) >= Nmin_W;
		end-do

	!Strict days off
		forall (d in Days) do
			StrictDaysOff(d) := s(d) - sum(r in Rosterlines) A_O(d, r) * l(r) <= 0;
		end-do

	!One strict day off
		forall (d in Days | d > 1 and d < getsize(Days)) do
			forall (s1 in ShiftTypes | exists(StrictDayOff1(s1))) do
				forall (s2 in StrictDayOff1(s1)) do
					StrictDaysOff1(d, s1, s2) := sum(r in Rosterlines) (A(d-1, s1, r) + A(d+1, s2, r)) * l(r) + s(d) <= 2;
				end-do
			end-do
		end-do

	!Two strict days off
		forall (d in Days | d > 1 and d < getsize(Days) - 1) do
			forall (s1 in ShiftTypes | exists(StrictDayOff2(s1))) do
				forall (s2 in StrictDayOff2(s1)) do
					StrictDaysOff2(d, s1, s2) := sum(r in Rosterlines) (A(d-1, s1, r) + A(d+2, s2, r)) * l(r) + s(d) + s(d+1) <= 3;
				end-do
			end-do
		end-do

	!Minimum strict days off in period
		forall (d in Days | d <= getsize(Days) - D_S + 1) do
			MinStrictDaysOff(d) := sum(dd in d..d+D_S-1) s(dd) >= Nmin_S;
		end-do

	!Work load
		forall (d in NormPeriodStartDays) do
			WorkLoad_plus(d) := sum(r in Rosterlines) DD(d, r) * l(r) - u_plus(d) <= W_N*H_W;
			WorkLoad_minus(d) := sum(r in Rosterlines) DD(d, r) * l(r) + u_minus(d) >= W_N*H_W;
		end-do

	!Rewarded Patterns
		forall (p in PatternsRewarded, d in union(a in WeekdaysStartPattern(p)) DaysOnWeekday(a) | d <= getsize(Days) - D(p) + 1) do
			RewardedPatterns(p, d) := sum(r in Rosterlines, dd in 1..D(p), g in ShiftGroups) M(dd, g, p) * A_g(d+dd-1, r, g) * l(r) >= D(p) * m(d, p);
		end-do

	!Penalized Patterns
		forall (p in PatternsPenalized, d in union(a in WeekdaysStartPattern(p)) DaysOnWeekday(a) | d <= getsize(Days) - D(p) + 1) do
			PenalizedPatterns(p, d) := sum(r in Rosterlines, dd in 1..D(p), g in ShiftGroups) M(dd, g, p) * A_g(d+dd-1, r, g) * l(r) <= D(p) - 1 + m(d, p);
		end-do

	!Illegal Patterns
		forall (p in PatternsIllegal, d in union(a in WeekdaysStartPattern(p)) DaysOnWeekday(a) | d <= getsize(Days) - D(p) + 1) do
			IllegalPatterns(p, d) := sum(r in Rosterlines, dd in 1..D(p), g in ShiftGroups) M(dd, g, p) * A_g(d+dd-1, r, g) * l(r) <= D(p) - 1;
		end-do

	!Overlapping patterns
		forall (p in PatternsRewarded + PatternsPenalized, d in union(a in WeekdaysStartPattern(p)) DaysOnWeekday(a) | d <= getsize(Days) - D(p) + 1) do
			OverlappingPatterns(p, d) := sum (dd in d..d + D(p) - 1) m(dd, p) <= 1;
		end-do

!=== Dual variables ===
	declarations
		dual_Convexity:					real;
		dual_MaxConsecDaysWorking: 		dynamic array(Days)							of real;
		dual_MinConsecDaysWorking: 		dynamic array(Days+{0})						of real;
		dual_MaxConsecDaysWorkingGroup:	dynamic array(ShiftGroups, Days)			of real;
		dual_MinConsecDaysWorkingGroup:	dynamic array(ShiftGroups, Days+{0})		of real;
		dual_MaxReducedRest: 			dynamic array(Days)							of real;
		dual_MinWeekendsOff: 			dynamic array(Weeks)						of real;
		dual_StrictDaysOff: 			dynamic array(Days)							of real;
		dual_StrictDaysOff1: 			dynamic array(Days, ShiftTypes, ShiftTypes)	of real;
		dual_StrictDaysOff2: 			dynamic array(Days, ShiftTypes, ShiftTypes)	of real;
		dual_MinStrictDaysOff: 			dynamic array(Days)							of real;
		dual_WorkLoad_plus:				dynamic array(NormPeriodStartDays)			of real;
		dual_WorkLoad_minus:			dynamic array(NormPeriodStartDays)			of real;
		dual_RewardedPatterns: 			dynamic array(PatternsRewarded, Days)		of real;
		dual_PenalizedPatterns:			dynamic array(PatternsPenalized, Days)		of real;
		dual_IllegalPatterns: 			dynamic array(PatternsIllegal, Days)				of real;
		dual_OverlappingPatterns: 	dynamic array(PatternsRewarded+PatternsPenalized, Days) of real;
	end-declarations

!=== Solution ===
	!Solve
	minimize(RosterLineCost);

	!=== Get duals ===
		!Convexity constraint
			dual_Convexity := getdual(Convexity);

		!Maximum consecutive days working
			forall (d in Days | d <= getsize(Days) - Nmax) do
				dual_MaxConsecDaysWorking(d) := getdual(MaxConsecDaysWorking(d));
			end-do

		!Minimum consecutive days working
			forall (d in (Days+{0}) | d <= getsize(Days) - Nmin) do
				dual_MinConsecDaysWorking(d) := getdual(MinConsecDaysWorking(d));
			end-do

		!Maximum consecutive days working shift group
			forall (g in ShiftGroups, d in Days | d <= getsize(Days) - NmaxGroup(g)) do
				dual_MaxConsecDaysWorkingGroup(g, d) := getdual(MaxConsecDaysWorkingGroup(g, d));
			end-do

		!Minimum consecutive days working shift group
			forall (g in ShiftGroups, d in (Days+{0}) | d <= getsize(Days) - NminGroup(g)) do
				dual_MinConsecDaysWorkingGroup(g,d) := getdual(MinConsecDaysWorkingGroup(g,d));
			end-do

		!Maximum reduced rest over regulation period
			forall (d in Days | d <= getsize(Days) - D_R + 1) do
				dual_MaxReducedRest(d) := getdual(MaxReducedRest(d));
			end-do

		!Minimum number of weekends off in regulation period
			forall (w in Weeks | w <= getsize(Weeks) - W_W+1) do
				dual_MinWeekendsOff(w) := getdual(MinWeekendsOff(w));
			end-do

		!Strict days off
			forall (d in Days) do
				dual_StrictDaysOff(d) := getdual(StrictDaysOff(d));
			end-do

		!One strict day off
			forall (d in Days | d > 1 and d < getsize(Days)) do
				forall (s1 in ShiftTypes | exists(StrictDayOff1(s1))) do
					forall (s2 in StrictDayOff1(s1)) do
						dual_StrictDaysOff1(d, s1, s2) := getdual(StrictDaysOff1(d, s1, s2));
					end-do
				end-do
			end-do

		!Two strict days off
			forall (d in Days | d > 1 and d < getsize(Days) - 1) do
				forall (s1 in ShiftTypes | exists(StrictDayOff2(s1))) do
					forall (s2 in StrictDayOff2(s1)) do
						dual_StrictDaysOff2(d, s1, s2) := getdual(StrictDaysOff2(d, s1, s2));
					end-do
				end-do
			end-do

		!Minimum strict days off in period
			forall (d in Days | d <= getsize(Days) - D_S + 1) do
				dual_MinStrictDaysOff(d) := getdual(MinStrictDaysOff(d));
			end-do

		!Work load
			forall (d in NormPeriodStartDays) do
				dual_WorkLoad_plus(d) := getdual(WorkLoad_plus(d));
				dual_WorkLoad_minus(d) := getdual(WorkLoad_minus(d));
			end-do

		!Rewarded Patterns
			forall (p in PatternsRewarded, d in union(a in WeekdaysStartPattern(p)) DaysOnWeekday(a) | d <= getsize(Days) - D(p) + 1) do
				dual_RewardedPatterns(p, d) := getdual(RewardedPatterns(p, d));
			end-do

		!Penalized Patterns
			forall (p in PatternsPenalized, d in union(a in WeekdaysStartPattern(p)) DaysOnWeekday(a) | d <= getsize(Days) - D(p) + 1) do
				dual_PenalizedPatterns(p, d) := getdual(PenalizedPatterns(p, d));
			end-do

		!Illegal Patterns
			forall (p in PatternsIllegal, d in union(a in WeekdaysStartPattern(p)) DaysOnWeekday(a) | d <= getsize(Days) - D(p) + 1) do
				dual_IllegalPatterns(p, d) := getdual(IllegalPatterns(p, d));
			end-do

		!Overlapping patterns
			forall (p in PatternsRewarded + PatternsPenalized, d in union(a in WeekdaysStartPattern(p)) DaysOnWeekday(a) | d <= getsize(Days) - D(p) + 1) do
				dual_OverlappingPatterns(p, d) := getdual(OverlappingPatterns(p, d));
			end-do
	!=== Write duals to file ===
		initializations to DualsFile
			dual_Convexity;
			dual_MaxConsecDaysWorking;
			dual_MinConsecDaysWorking;
			dual_MaxConsecDaysWorkingGroup;
			dual_MinConsecDaysWorkingGroup;
			dual_MaxReducedRest;
			dual_MinWeekendsOff;
			dual_StrictDaysOff;
			dual_StrictDaysOff1;
			dual_StrictDaysOff2;
			dual_MinStrictDaysOff;
			dual_WorkLoad_plus;
			dual_WorkLoad_minus;
			dual_RewardedPatterns;
			dual_PenalizedPatterns;
			dual_IllegalPatterns;
			dual_OverlappingPatterns;
		end-initializations

	!=== Print solution ===
	forall (r in Rosterlines) do
	writeln("l(", r, ") = ", getsol(l(r)));
	end-do
	writeln("Objective value: ", getobjval);

	!=== Write solution to file ===
	declarations
		lambda: dynamic array(Rosterlines) of real;
		objective: real;
	end-declarations
	forall(r in Rosterlines) do
		lambda(r) := getsol(l(r));
	end-do
	objective := getobjval;
	initializations to SolutionFile
		lambda;
		objective;
	end-initializations

end-model
